let mapleader = "\<Space>"


" vim-plug {{{
call plug#begin('~/.vim/plugged')
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'scrooloose/nerdtree'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
Plug 'simeji/winresizer'
Plug 'udalov/kotlin-vim'
Plug 'thinca/vim-quickrun'

" vim-lsp {{{
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
" }}}

" vim-lsp {{{
    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
    Plug 'mattn/vim-lsp-settings'
    Plug 'mattn/vim-goimports'
" }}}

call plug#end()
" }}}


" NERDTree {{{
nnoremap <silent><C-n> :NERDTreeToggle<CR>
" ファイルオープン時にnerdTreeも閉じる
let g:NERDTreeQuitOnOpen = 1
" }}}

" winresizer {{{
let g:winresizer_start_key = '<C-k>'
" }}}


" vim-lsp {{{
let g:lsp_diagnostics_enabled = 0
" debug
" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/vim-lsp.log')
" let g:asyncomplete_log_file = expand('~/asyncomplete.log')
nnoremap <silent> <C-i> :LspDefinition<cr>
" }}}


" fzf {{{
nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>g :GFiles<CR>
nnoremap <silent> <leader>G :GFiles?<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>l :BLines<CR>
nnoremap <silent> <leader>h :History<CR>
nnoremap <silent> <leader>m :Mark<CR>
" }}}


" quickRun {{{
let g:quickrun_config={'*': {'split': 'vertical'}}
set splitright
nnoremap <buffer> <silent> <Leader>t :<C-u>QuickRun<CR>
" }}}

" file {{{
set fenc=utf-8
set encoding=utf-8
scriptencoding utf-8

set nobackup
set noswapfile
set noundofile
set autoread
set hidden
set showcmd

set fileformats=unix,dos,mac
set fileencodings=utf-8,sjis
set ambiwidth=double

filetype on
filetype indent on
" }}}


" tab indent {{{
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent

augroup fileTypeIndent
    autocmd!
    autocmd BufNewFile,BufRead *.py setlocal tabstop=2 softtabstop=2 shiftwidth=2
    autocmd BufNewFile,BufRead *.sh setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END

" }}}

" search {{{
set incsearch
set hlsearch
set ignorecase
set smartcase
" }}}


" other {{{
set title
set number
set noruler
set cursorline
set clipboard=unnamed

set wildmenu

set visualbell
set showmatch
set wildmode=list:longest


set statusline=%f               " filename relative to current $PWD
set statusline+=%h              " help file flag
set statusline+=%m              " modified flag
set statusline+=%r              " readonly flag
set statusline+=\ [%{&ff}]      " Fileformat [unix]/[dos] etc...
set statusline+=\ (%{strftime(\"%H:%M\ %d/%m/%Y\",getftime(expand(\"%:p\")))})  " last modified timestamp
set statusline+=%=

set statusline+=[line=%l/%L]
set laststatus=2
set formatoptions-=ro
" }}}

" US対応 {{{
inoremap <C-j> <esc>
vnoremap <C-j> <esc>

nnoremap ; :
nnoremap : ;
" }}}


" scheme {{{
" autocmd ColorScheme * highlight Normal ctermbg=none
" autocmd ColorScheme * highlight LineNr ctermbg=none

" }}}

" status line color
" highlight StatusLine ctermbg=gray ctermfg=black

